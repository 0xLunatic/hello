buildscript {
    dependencies {
        // Add this classpath in the dependencies section
        classpath 'com.google.gms:google-services:4.3.15'
    }
}


dependencies {
    // Add Firebase Database dependency
    implementation 'com.google.firebase:firebase-database:20.2.3'
}

// Apply the plugin
apply plugin: 'com.google.gms.google-services'


{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null"
  }
}


data class User(
    var id: String? = null, // Automatically generated by Firebase
    var name: String? = "",
    var email: String? = ""
)

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase

class MainActivity : AppCompatActivity() {

    // Firebase instance
    private val database: FirebaseDatabase = FirebaseDatabase.getInstance()
    private val myRef: DatabaseReference = database.getReference("users")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Insert user data example
        val userId = "user123" // Example user ID
        val user = User(id = userId, name = "John Doe", email = "john@example.com")
        insertUser(userId, user)

        // Read user data example
        getUser(userId)

        // Update user data example
        val updatedUser = User(id = userId, name = "Jane Doe", email = "jane@example.com")
        updateUser(userId, updatedUser)

        // Delete user data example
        deleteUser(userId)
    }

    // Insert user data into Firebase Realtime Database
    private fun insertUser(userId: String, user: User) {
        myRef.child(userId).setValue(user)
            .addOnSuccessListener {
                Toast.makeText(this, "User added successfully", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener {
                Toast.makeText(this, "Failed to add user", Toast.LENGTH_SHORT).show()
            }
    }

    // Read user data from Firebase Realtime Database
    private fun getUser(userId: String) {
        myRef.child(userId).get().addOnSuccessListener { dataSnapshot ->
            val user = dataSnapshot.getValue(User::class.java)
            if (user != null) {
                Toast.makeText(this, "User: ${user.name}, ${user.email}", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "No such user", Toast.LENGTH_SHORT).show()
            }
        }.addOnFailureListener {
            Toast.makeText(this, "Failed to retrieve user", Toast.LENGTH_SHORT).show()
        }
    }

    // Update user data in Firebase
    private fun updateUser(userId: String, user: User) {
        myRef.child(userId).setValue(user)
            .addOnSuccessListener {
                Toast.makeText(this, "User updated successfully", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener {
                Toast.makeText(this, "Failed to update user", Toast.LENGTH_SHORT).show()
            }
    }

    // Delete user data from Firebase
    private fun deleteUser(userId: String) {
        myRef.child(userId).removeValue()
            .addOnSuccessListener {
                Toast.makeText(this, "User deleted successfully", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener {
                Toast.makeText(this, "Failed to delete user", Toast.LENGTH_SHORT).show()
            }
    }
}
